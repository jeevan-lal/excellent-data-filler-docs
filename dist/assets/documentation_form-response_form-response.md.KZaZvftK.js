import{_ as r,c as s,o,ah as t,bc as a}from"./chunks/framework.Dp_r5Pqh.js";const h=JSON.parse('{"title":"Form Response","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/form-response/form-response.md","filePath":"documentation/form-response/form-response.md","lastUpdated":1751799890000}'),n={name:"documentation/form-response/form-response.md"};function i(l,e,c,p,d,m){return o(),s("div",null,[...e[0]||(e[0]=[t('<h1 id="form-response" tabindex="-1">Form Response <a class="header-anchor" href="#form-response" aria-label="Permalink to “Form Response”">​</a></h1><p>Form Response functionality allows you to handle and process server-side responses after form submission. This feature enables you to manage different response scenarios, track entry status, and control the automation workflow based on server feedback.</p><p><img src="'+a+'" alt="Entry Response"></p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to “Overview”">​</a></h2><p>After filling and submitting a form entry, the server typically responds with either a success or error message. The Form Response feature allows you to:</p><ul><li><strong>📊 Track Entry Status</strong> - Monitor whether entries are successfully saved or failed</li><li><strong>🔄 Control Workflow</strong> - Determine next actions based on server responses</li><li><strong>🎯 Handle Errors</strong> - Manage error scenarios and retry logic</li><li><strong>✅ Mark Entries</strong> - Automatically mark successful entries as saved</li></ul><h2 id="response-types" tabindex="-1">Response Types <a class="header-anchor" href="#response-types" aria-label="Permalink to “Response Types”">​</a></h2><h3 id="success-response" tabindex="-1"><a href="/documentation/form-response/form-success-response.html">✅ Success Response</a> <a class="header-anchor" href="#success-response" aria-label="Permalink to “✅ Success Response”">​</a></h3><p>When a form entry is successfully submitted and saved by the server.</p><p><strong>Characteristics:</strong></p><ul><li><strong>Confirmation Message</strong> - Server confirms successful data processing</li><li><strong>Success Indicators</strong> - Specific text, elements, or patterns indicating success</li></ul><p><strong>Common Success Indicators:</strong></p><ul><li>&quot;Thank you for your submission&quot;</li><li>&quot;Your data has been saved successfully&quot;</li><li>&quot;Form submitted successfully&quot;</li></ul><h3 id="error-response" tabindex="-1"><a href="/documentation/form-response/form-error-response.html">❌ Error Response</a> <a class="header-anchor" href="#error-response" aria-label="Permalink to “❌ Error Response”">​</a></h3><p>When form submission fails due to server-side issues or validation errors.</p><p><strong>Characteristics:</strong></p><ul><li><strong>Error Messages</strong> - Server returns specific error information</li><li><strong>Validation Errors</strong> - Field-specific or general validation failures</li><li><strong>System Errors</strong> - Server-side processing errors</li></ul><p><strong>Common Error Indicators:</strong></p><ul><li>&quot;Please correct the following errors&quot;</li><li>&quot;Invalid data provided&quot;</li><li>&quot;Server error occurred&quot;</li><li>Validation error messages</li></ul><h2 id="integration-with-automation" tabindex="-1">Integration with Automation <a class="header-anchor" href="#integration-with-automation" aria-label="Permalink to “Integration with Automation”">​</a></h2><h3 id="workflow-integration" tabindex="-1">🔄 Workflow Integration <a class="header-anchor" href="#workflow-integration" aria-label="Permalink to “🔄 Workflow Integration”">​</a></h3><p>Form Response seamlessly integrates with the overall automation workflow:</p><ol><li><strong>Form Filling</strong> - Complete form with data</li><li><strong>Form Submission</strong> - Submit form to server</li><li><strong>Response Monitoring</strong> - Wait for and detect server response</li><li><strong>Action Execution</strong> - Execute appropriate actions based on response</li><li><strong>Status Update</strong> - Update entry status and continue workflow</li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to “Next Steps”">​</a></h2><ul><li><a href="/documentation/form-response/form-success-response.html">Success Response</a> - Configure success response handling</li><li><a href="/documentation/form-response/form-error-response.html">Error Response</a> - Set up error response management</li><li><a href="/documentation/form-fields/field-response-action.html">Field Response Actions</a> - Configure field-level response actions</li><li><a href="/documentation/log.html">Log Management</a> - Monitor and analyze response logs</li></ul><h2 id="tips-and-tricks" tabindex="-1">Tips and Tricks <a class="header-anchor" href="#tips-and-tricks" aria-label="Permalink to “Tips and Tricks”">​</a></h2><h3 id="pro-tips" tabindex="-1">💡 Pro Tips <a class="header-anchor" href="#pro-tips" aria-label="Permalink to “💡 Pro Tips”">​</a></h3><ol><li><strong>Start Simple</strong> - Begin with basic text-based detection before advanced methods</li><li><strong>Monitor Performance</strong> - Keep track of response detection accuracy</li></ol>',28)])])}const f=r(n,[["render",i]]);export{h as __pageData,f as default};

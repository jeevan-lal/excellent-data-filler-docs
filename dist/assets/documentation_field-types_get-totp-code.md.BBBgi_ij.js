import{_ as t,c as i,o,ah as s}from"./chunks/framework.Dp_r5Pqh.js";const g=JSON.parse('{"title":"Get TOTP Code","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/field-types/get-totp-code.md","filePath":"documentation/field-types/get-totp-code.md","lastUpdated":null}'),l={name:"documentation/field-types/get-totp-code.md"};function n(a,e,r,d,p,c){return o(),i("div",null,[...e[0]||(e[0]=[s('<h1 id="get-totp-code" tabindex="-1">Get TOTP Code <a class="header-anchor" href="#get-totp-code" aria-label="Permalink to ‚ÄúGet TOTP Code‚Äù">‚Äã</a></h1><p>The Get TOTP Code field type allows you to automatically generate and fill Time-based One-Time Password (TOTP) codes from Google Authenticator or other TOTP-compatible applications. This field type can handle both single input fields and multiple input fields for code splitting scenarios.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to ‚ÄúOverview‚Äù">‚Äã</a></h2><p>TOTP (Time-based One-Time Password) is a security mechanism that generates time-sensitive codes for two-factor authentication. The Get TOTP Code field type enables you to:</p><ul><li><strong>üîê Generate TOTP Codes</strong> - Automatically generate valid TOTP codes from authenticator URIs</li><li><strong>üì± Google Authenticator Support</strong> - Works with Google Authenticator and other TOTP apps</li><li><strong>üî¢ Code Splitting</strong> - Split codes across multiple input fields</li></ul><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to ‚ÄúConfiguration Options‚Äù">‚Äã</a></h2><h3 id="üîó-uri-of-the-totp-code" tabindex="-1">üîó URI of the TOTP Code <a class="header-anchor" href="#üîó-uri-of-the-totp-code" aria-label="Permalink to ‚Äúüîó URI of the TOTP Code‚Äù">‚Äã</a></h3><p>The primary configuration option where you enter the TOTP URI (Uniform Resource Identifier) that contains the secret key and other parameters needed to generate the TOTP code.</p><p><strong>URI Format:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>otpauth://totp/AccountName?secret=SECRET_KEY&amp;issuer=ISSUER_NAME&amp;algorithm=SHA1&amp;digits=6&amp;period=30</span></span></code></pre></div><p><strong>How to Get TOTP URI:</strong></p><ol><li><p><strong>From Google Authenticator:</strong></p><ul><li>Open Google Authenticator app</li><li>Tap on the account you want to use</li><li>Look for &quot;Export&quot; or &quot;Show QR Code&quot; option</li><li>The URI is usually displayed in the QR code or export options</li></ul></li><li><p><strong>From Other Apps:</strong></p><ul><li>Most TOTP apps provide export functionality</li><li>Look for &quot;Export&quot;, &quot;Backup&quot;, or &quot;Show Secret&quot; options</li><li>Copy the URI or secret key</li></ul></li><li><p><strong>From Service Provider:</strong></p><ul><li>Some services provide TOTP URIs directly</li><li>Check account security settings for 2FA setup</li><li>Look for &quot;Manual Entry&quot; or &quot;Advanced&quot; options</li></ul></li></ol><h3 id="should-we-split-the-code" tabindex="-1">üîÄ Should we split the code? <a class="header-anchor" href="#should-we-split-the-code" aria-label="Permalink to ‚ÄúüîÄ Should we split the code?‚Äù">‚Äã</a></h3><p>This toggle option determines how the TOTP code is filled into form fields.</p><h4 id="single-input-mode-toggle-off" tabindex="-1">Single Input Mode (Toggle OFF) <a class="header-anchor" href="#single-input-mode-toggle-off" aria-label="Permalink to ‚ÄúSingle Input Mode (Toggle OFF)‚Äù">‚Äã</a></h4><p>When the toggle is <strong>OFF</strong>, the entire TOTP code is filled into a single input field.</p><p><strong>Use Cases:</strong></p><ul><li>Standard TOTP input fields</li><li>Single 6-digit code input</li><li>Simple authentication forms</li></ul><p><strong>Configuration:</strong></p><ul><li><strong>Field Selector</strong> - CSS selector for the single input field</li><li><strong>Code Format</strong> - Complete 6-digit code (e.g., &quot;123456&quot;)</li></ul><h4 id="split-code-mode-toggle-on" tabindex="-1">Split Code Mode (Toggle ON) <a class="header-anchor" href="#split-code-mode-toggle-on" aria-label="Permalink to ‚ÄúSplit Code Mode (Toggle ON)‚Äù">‚Äã</a></h4><p>When the toggle is <strong>ON</strong>, the TOTP code is split across multiple input fields, with each digit going into a separate field.</p><p><strong>Use Cases:</strong></p><ul><li>Multi-digit input fields (one digit per field)</li><li>Enhanced security forms</li><li>Custom authentication interfaces</li></ul><p><strong>Configuration:</strong></p><ul><li><strong>Field Selector Query</strong> - CSS selector that matches multiple input fields</li><li><strong>Code Length</strong> - Number of digits to split (usually 6)</li><li><strong>Sequential Filling</strong> - Fill fields in order (1st digit ‚Üí 1st field, 2nd digit ‚Üí 2nd field, etc.)</li></ul><h2 id="field-selector-configuration" tabindex="-1">Field Selector Configuration <a class="header-anchor" href="#field-selector-configuration" aria-label="Permalink to ‚ÄúField Selector Configuration‚Äù">‚Äã</a></h2><h3 id="single-input-field" tabindex="-1">üéØ Single Input Field <a class="header-anchor" href="#single-input-field" aria-label="Permalink to ‚ÄúüéØ Single Input Field‚Äù">‚Äã</a></h3><p>For single input mode, provide a CSS selector that targets one input field.</p><p><strong>Common Selectors:</strong></p><ul><li><code>input[type=&quot;text&quot;]</code> - Generic text input</li><li><code>#totp-code</code> - Input with specific ID</li><li><code>.otp-input</code> - Input with specific class</li><li><code>input[name=&quot;totp&quot;]</code> - Input with specific name attribute</li></ul><p><strong>Example:</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#totp-input-field</span></span></code></pre></div><h3 id="multiple-input-fields" tabindex="-1">üî¢ Multiple Input Fields <a class="header-anchor" href="#multiple-input-fields" aria-label="Permalink to ‚Äúüî¢ Multiple Input Fields‚Äù">‚Äã</a></h3><p>For split code mode, provide a CSS selector that matches multiple input fields.</p><p><strong>Common Selectors:</strong></p><ul><li><code>input[type=&quot;text&quot;]</code> - All text inputs (if they&#39;re the only ones)</li><li><code>.otp-digit</code> - Inputs with specific class</li><li><code>input[name^=&quot;digit&quot;]</code> - Inputs with name starting with &quot;digit&quot;</li><li><code>.code-input input</code> - Inputs within a specific container</li></ul><p><strong>Example:</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.otp-inputs</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p><strong>Field Order:</strong> The extension will fill the fields in the order they appear in the DOM. Ensure your selector matches fields in the correct sequence.</p><h2 id="advanced-configuration" tabindex="-1">Advanced Configuration <a class="header-anchor" href="#advanced-configuration" aria-label="Permalink to ‚ÄúAdvanced Configuration‚Äù">‚Äã</a></h2><h3 id="üîê-security-considerations" tabindex="-1">üîê Security Considerations <a class="header-anchor" href="#üîê-security-considerations" aria-label="Permalink to ‚Äúüîê Security Considerations‚Äù">‚Äã</a></h3><p><strong>Best Practices:</strong></p><ul><li><strong>Secure Storage</strong> - TOTP URIs are stored securely in the extension</li><li><strong>Local Processing</strong> - Code generation happens locally, not on external servers</li><li><strong>No Network</strong> - TOTP generation doesn&#39;t require internet connection</li><li><strong>Encryption</strong> - Stored secrets are encrypted</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to ‚ÄúTroubleshooting‚Äù">‚Äã</a></h2><h3 id="‚ùå-common-issues" tabindex="-1">‚ùå Common Issues <a class="header-anchor" href="#‚ùå-common-issues" aria-label="Permalink to ‚Äú‚ùå Common Issues‚Äù">‚Äã</a></h3><p><strong>Issue:</strong> TOTP code not generating <strong>Solutions:</strong></p><ul><li>Verify the URI format is correct</li><li>Check that the secret key is properly encoded</li><li>Ensure the time period matches the authenticator app</li><li>Verify the algorithm and digits parameters</li></ul><p><strong>Issue:</strong> Code not filling in fields <strong>Solutions:</strong></p><ul><li>Check the field selector is correct</li><li>Verify the fields are visible and enabled</li><li>Test the selector in browser developer tools</li><li>Ensure the fields accept the generated code format</li></ul><p><strong>Issue:</strong> Split code not working <strong>Solutions:</strong></p><ul><li>Verify the selector matches multiple fields</li><li>Check that fields are in the correct order</li><li>Ensure all fields are accessible</li><li>Test with a simple selector first</li></ul><h3 id="üîß-debugging-tips" tabindex="-1">üîß Debugging Tips <a class="header-anchor" href="#üîß-debugging-tips" aria-label="Permalink to ‚Äúüîß Debugging Tips‚Äù">‚Äã</a></h3><ol><li><strong>Test URI</strong> - Verify the URI works in a TOTP app first</li><li><strong>Check Selectors</strong> - Use browser tools to test selectors</li><li><strong>Monitor Console</strong> - Check browser console for errors</li><li><strong>Time Sync</strong> - Ensure system time is accurate</li><li><strong>Field Validation</strong> - Verify fields accept the input format</li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to ‚ÄúNext Steps‚Äù">‚Äã</a></h2><ul><li><a href="/documentation/form-fields/field-settings.html">Field Settings</a> - Configure advanced field options</li><li><a href="/documentation/form-fields/field-types.html">Field Types</a> - Explore other field types</li><li><a href="/documentation/variable.html">Variables</a> - Use variables for dynamic TOTP handling</li><li><a href="/documentation/form/form.html">Form Configuration</a> - Set up complete form automation</li></ul>',56)])])}const u=t(l,[["render",n]]);export{g as __pageData,u as default};

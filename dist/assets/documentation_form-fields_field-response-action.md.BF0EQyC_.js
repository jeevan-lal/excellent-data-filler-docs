import{_ as o,c as t,o as i,ah as s,aR as n,aS as r,aT as a}from"./chunks/framework.0CRElgwM.js";const m=JSON.parse('{"title":"Field Response Action","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/form-fields/field-response-action.md","filePath":"documentation/form-fields/field-response-action.md","lastUpdated":1758109585000}'),l={name:"documentation/form-fields/field-response-action.md"};function c(d,e,p,g,u,f){return i(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="field-response-action" tabindex="-1">Field Response Action <a class="header-anchor" href="#field-response-action" aria-label="Permalink to ‚ÄúField Response Action‚Äù">‚Äã</a></h1><p>Field Response Actions allow you to define specific behaviors that execute based on the outcome of field operations. After form field execution, you receive different response types (<strong>success</strong>, <strong>error</strong>, and <strong>skip</strong>), and you can configure custom actions to be triggered automatically based on these responses.</p><h2 id="available-action-types" tabindex="-1">Available Action Types <a class="header-anchor" href="#available-action-types" aria-label="Permalink to ‚ÄúAvailable Action Types‚Äù">‚Äã</a></h2><p>When configuring a Field Response Action, you can choose from the following predefined actions:</p><ul><li>üñ±Ô∏è <strong>Click on Element</strong> - Simulate a click on a specified web element</li><li>‚û°Ô∏è <strong>Execute Segment</strong> - Run a predefined segment of your automation workflow</li><li>üíæ <strong>Set Local Data</strong> - Store a value in local data for later use</li><li>üóëÔ∏è <strong>Remove Local Data</strong> - Delete a specific local data entry</li><li>‚úÖ <strong>Mark Entry As Saved</strong> - Mark the current data entry as successfully saved</li><li>‚è≠Ô∏è <strong>Go to Next Entry</strong> - Proceed to the next data entry in your dataset</li><li>‚è© <strong>Skip Segment</strong> - Bypass the current automation segment</li><li>üö´ <strong>Skip Form</strong> - Skip the entire current form</li><li>üõë <strong>Stop Loop</strong> - Halt the execution of the current loop</li></ul><h2 id="field-success-response-action" tabindex="-1">Field Success Response Action <a class="header-anchor" href="#field-success-response-action" aria-label="Permalink to ‚ÄúField Success Response Action‚Äù">‚Äã</a></h2><p>The <strong>Success Response Action</strong> is executed when a field operation completes successfully. This action allows you to define what should happen when a field is filled, clicked, or processed without any errors.</p><p><strong>Common Success Actions:</strong></p><ul><li><strong>Continue to Next Field</strong> - Automatically proceed to the next field in sequence</li><li><strong>Show Success Message</strong> - Display a confirmation message to the user</li><li><strong>Log Success Event</strong> - Record the successful operation in the extension log</li><li><strong>Execute Custom JavaScript</strong> - Run custom code when the field succeeds</li><li><strong>Update Variables</strong> - Set or update variables based on successful field completion</li><li><strong>Trigger Notifications</strong> - Send notifications or alerts for successful operations</li></ul><p><strong>Use Cases:</strong></p><ul><li>Confirming successful data entry</li><li>Moving to the next step in a multi-step form</li><li>Updating progress indicators</li><li>Logging successful operations for audit purposes</li></ul><img src="'+n+'" width="400" height="400" alt="Field Success Response Action"><h2 id="field-error-response-action" tabindex="-1">Field Error Response Action <a class="header-anchor" href="#field-error-response-action" aria-label="Permalink to ‚ÄúField Error Response Action‚Äù">‚Äã</a></h2><p>The <strong>Error Response Action</strong> is executed when a field operation fails or encounters an error. This action helps you handle errors gracefully and maintain the automation workflow even when issues occur.</p><p><strong>Common Error Actions:</strong></p><ul><li><strong>Retry Operation</strong> - Automatically attempt the field operation again</li><li><strong>Skip to Next Field</strong> - Move to the next field if the current one fails</li><li><strong>Show Error Message</strong> - Display an error notification to the user</li><li><strong>Log Error Details</strong> - Record error information in the extension log</li><li><strong>Execute Error Handler</strong> - Run custom error handling code</li><li><strong>Stop Automation</strong> - Halt the entire automation process</li><li><strong>Fallback Action</strong> - Execute an alternative action when the primary fails</li></ul><p><strong>Use Cases:</strong></p><ul><li>Handling field validation errors</li><li>Managing network timeouts</li><li>Dealing with element not found errors</li><li>Providing user feedback for failed operations</li></ul><img src="'+r+'" width="400" height="400" alt="Field Error Response Action"><h2 id="field-skip-response-action" tabindex="-1">Field Skip Response Action <a class="header-anchor" href="#field-skip-response-action" aria-label="Permalink to ‚ÄúField Skip Response Action‚Äù">‚Äã</a></h2><p>The <strong>Skip Response Action</strong> is executed when a field is intentionally skipped or when skip conditions are met. This action allows you to define behavior when fields are bypassed during automation.</p><p><strong>Common Skip Actions:</strong></p><ul><li><strong>Continue to Next Field</strong> - Proceed to the next field in the sequence</li><li><strong>Log Skip Event</strong> - Record that the field was skipped</li><li><strong>Update Skip Counter</strong> - Track the number of skipped fields</li><li><strong>Execute Skip Logic</strong> - Run custom code for skipped fields</li><li><strong>Show Skip Notification</strong> - Inform the user that a field was skipped</li><li><strong>Conditional Processing</strong> - Apply different logic based on skip reasons</li></ul><p><strong>Use Cases:</strong></p><ul><li>Handling optional fields that don&#39;t need to be filled</li><li>Managing conditional form sections</li><li>Processing fields based on user preferences</li><li>Implementing smart form navigation</li></ul><img src="'+a+'" width="400" height="400" alt="Field Skip Response Action">',26)])])}const k=o(l,[["render",c]]);export{m as __pageData,k as default};
